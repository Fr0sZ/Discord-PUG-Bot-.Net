<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CaptainsWithSkill" xml:space="preserve">
    <value>Captain 1: {0} Skill: {1}
Captain 2: {2} Skill: {3}</value>
  </data>
  <data name="ErrorAlreadyVotedForMap" xml:space="preserve">
    <value>{0}, You have already voted.</value>
  </data>
  <data name="ErrorCantPickThatPlayer" xml:space="preserve">
    <value>You can't pick that player.</value>
  </data>
  <data name="ErrorCantReadyUpRightNow" xml:space="preserve">
    <value>**{0}**, You can't ready up at this time</value>
  </data>
  <data name="ErrorInvaildMapNumber" xml:space="preserve">
    <value>{0}, Invalid map number.</value>
  </data>
  <data name="ErrorLeavePugYouareNotIn" xml:space="preserve">
    <value>**{0}**, You can't leave since you are not in the {1} queue. {1} {2}/{3}
</value>
  </data>
  <data name="ErrorOnlyCaptainsCanEnterResult" xml:space="preserve">
    <value>{0}, Only captains can enter match results.</value>
  </data>
  <data name="ErrorOnlyPeopleInThePugCanVote" xml:space="preserve">
    <value>{0}, Only people in the pug can vote for map/gamemode.</value>
  </data>
  <data name="ErrorPugIsFull" xml:space="preserve">
    <value>**{0}**, Pug is full.</value>
  </data>
  <data name="ErrorResultWinnerWrong" xml:space="preserve">
    <value>\"Win\" if you team won, and \"Lose\" if your team lost. It's not that hard.</value>
  </data>
  <data name="ErrorWaitUntilTheyFinishedPicking" xml:space="preserve">
    <value>**{0}**, Wait until they have finished picking teams on the last pug, before typing .add</value>
  </data>
  <data name="ErrorWrongRegionAdd" xml:space="preserve">
    <value>**{0}**, Wrong region use .a &lt;na/eu/both&gt;.</value>
  </data>
  <data name="ErrorWrongRegionLeave" xml:space="preserve">
    <value>**{0}**, Wrong region use .l &lt;na/eu/both&gt;.</value>
  </data>
  <data name="ErrorYouAreAlreadySignedUp" xml:space="preserve">
    <value>{0}, you are already signed up. {1} {2}/{3} players.</value>
  </data>
  <data name="ErrorYouAreNotAllowedToPick" xml:space="preserve">
    <value>You are not allowed to pick.</value>
  </data>
  <data name="ErrorYouAreNotInThePug" xml:space="preserve">
    <value>You are not in the pug.</value>
  </data>
  <data name="EveryoneReady" xml:space="preserve">
    <value>Everyone is ready, randoming captains.</value>
  </data>
  <data name="GameModeVoteFinished" xml:space="preserve">
    <value>Voting ended. **{0} {1} ({2})** won the vote. Match Id: **{3}**
**GL HF**
Captains don't forget to enter match results after the match. (.result &lt;win/lose&gt;)
</value>
  </data>
  <data name="MapVoteFinishedVoteForGameMode" xml:space="preserve">
    <value>
 Map: ** {0} ** 
**Vote for gamemode, you have {1}sec.** (.vote &lt;number&gt;)
</value>
  </data>
  <data name="MatchFinished" xml:space="preserve">
    <value>Match finished **{0} Won!** {1} {2} ({3}) {4}
{5}</value>
  </data>
  <data name="NameAndRating" xml:space="preserve">
    <value>**{0}** Rating: {1}</value>
  </data>
  <data name="PickNumber" xml:space="preserve">
    <value>(.pick &lt;number&gt;)
</value>
  </data>
  <data name="PlayerJoinedTheQueue" xml:space="preserve">
    <value>**{0}** {1}/{2} players. **{3}** joined the queue.
</value>
  </data>
  <data name="PlayerLeftTheQueue" xml:space="preserve">
    <value>**{0}**, you have left the pug. **{1}** {2}/{3} players.
</value>
  </data>
  <data name="PlayersTurnToPick" xml:space="preserve">
    <value>{0} turn to pick.</value>
  </data>
  <data name="PlayerVotedForMap" xml:space="preserve">
    <value>{0}, voted for **{1}**.</value>
  </data>
  <data name="PleaseReadyUp" xml:space="preserve">
    <value>{0}/{1} players ready. Write .r to ready up.
</value>
  </data>
  <data name="PugCanceled" xml:space="preserve">
    <value>**Pug canceled**</value>
  </data>
  <data name="PugIsNowFull" xml:space="preserve">
    <value>**{0}** Pug is now full, everyone ready up. (.ready)</value>
  </data>
  <data name="RemovingPlayerThatIsNotReady" xml:space="preserve">
    <value>Removing users that didn't ready up.
{0}/{1} players.
</value>
  </data>
  <data name="TeamLineups" xml:space="preserve">
    <value>**Team 1:**
{0}
**Team 2:**
{1}</value>
  </data>
  <data name="UserPickingInfo" xml:space="preserve">
    <value>**{0}.** {1} Rating: **{2}** {3}</value>
  </data>
  <data name="VoteMap" xml:space="preserve">
    <value>
**Vote for map, you have {0}sec.** (.vote &lt;number&gt;)
</value>
  </data>
  <data name="ErrorSteamIDToLong" xml:space="preserve">
    <value>SteamId to long.</value>
  </data>
  <data name="ErrorUserInfoToLong" xml:space="preserve">
    <value>Userinfo to long.</value>
  </data>
  <data name="HelpInfo" xml:space="preserve">
    <value>**Dices Pug Bot
Stats Website:** http://dpl.victormoller.com/ 
**To sign up for a pug write .add
Commands:** 
.help
.status
.userinfo &lt;username&gt;
.setinfo &lt;info&gt;
.add
.remove
.ready
.pick &lt;player&gt;
.vote &lt;map/gamemode&gt;
.result &lt;win/lose/cancel&gt;
.lookingforteam
.top10
.noteamplayers
.nolifer
.gamemodestats
.mapstats</value>
  </data>
  <data name="InfoMapStats" xml:space="preserve">
    <value>**Total games played:** {0}
{1}</value>
  </data>
  <data name="InfoMostActivePlayers" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="InfoPlayersLookingForTeam" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="InfoTopPlayers" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="LookingForTeamUpdated" xml:space="preserve">
    <value>{0}, Looking for team: {1}</value>
  </data>
  <data name="MatchInfo" xml:space="preserve">
    <value>
**Match: {0} {1}** Duration: {3}min
</value>
  </data>
  <data name="NameAndGamesPlayed" xml:space="preserve">
    <value>**{0}** Games Played: {1}</value>
  </data>
  <data name="NameAndSkillAndDeviation" xml:space="preserve">
    <value>**{0}** Skill rating: {1} (±{2})</value>
  </data>
  <data name="PlayerFullInfo" xml:space="preserve">
    <value>**{0}**
**Rating:** {1} (±{2})
**Wins:** {3}
**Losses:** {4}
**Wins as captain:** {5}
**Loses as captain:** {6}{7}
**Looking for a team?:** {8}</value>
  </data>
  <data name="PlayerLongInfo" xml:space="preserve">
    <value>**{0}** Skill rating: {1} (±{2}) {3}</value>
  </data>
  <data name="SteamIDUpdated" xml:space="preserve">
    <value>SteamId updated.</value>
  </data>
  <data name="UserInfoUpdated" xml:space="preserve">
    <value>Userinfo updated.</value>
  </data>
</root>